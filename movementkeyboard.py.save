import asyncio

from pymavlink import mavutil

from sshkeyboard import listen_keyboard


async def press(key):
 print(f"'{key}' is pressed")
 await control(value=key)

async def control(value):
 allowed_keys=['w','a','s','d','q']
 if value in allowed_keys:
  if value == 'w':
   await front()
  if value =='s':
   back()
  if value =='a':
   left()
  if value == 'd':
   right()
  if value == 'q':
   exit()
 else:
   print("Enter a valid character")

def connection():
 the_connection = mavutil.mavlink_connection('udpin:localhost:14551')
# Wait for the first heartbeat
#   This sets the system and component ID of remote system for the link
 the_connection.wait_heartbeat()
 print("Heartbeat from system (system %u component %u)" % (the_connection.target_system, the_connection.target_component))
 the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,176, 0, 1, 4, 0, 0, 0, 0, 0)
 listen_keyboard(on_press=press)
 while 1:
  msg = the_connection.recv_match(type='GLOBAL_POSITION_INT', blocking=True)

async def newlatlon (msg):
 heading=(msg.hdg)/100
 lati=(msg.lat)/10000000
 longi=(msg.lon)/10000000
 na = (6378.137*6378.137*math.cos(lati))
 nb = (6356.753*6356.753*math.sin(lati))
 da = (6378.137*math.cos(lati))
 db = (6356.753*math.sin(lati))
 rade = math.sqrt(((na*na)+(nb*nb))/((da*da)+(db*db)))
 AD = 1/rade
 newheading = heading - 90
 newlati =lati + math.asin(math.sin(lati)*math.cos(AD) + math.cos(lati)*math.sin(AD)*math.cos(newheading))
 return (newlati*10000000), (longi*10000000)

async def front():
 the_connection = mavutil.mavlink_connection('udpin:localhost:14551')
 msg = the_connection.recv_match(type='GLOBAL_POSITION_INT', blocking=True)
 loop = asyncio.get_event_loop()
 task = loop.create_task(newlatlon(msg))
 value = task.result()
 print(value)
 the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0, 0, 0, float(newlati), float(longi), 10.00)
async def back():
 the_connection.mav.send(mavutil.mavlink.MAVLink_set_position_target_local_ned_message(10, the_connection.target_system,the_connection.target_component, mavutil.mavlink.MAV_FRAME_LOCAL_NED, int(0b010111111000), -1, 0,0 , 0, 0, 0, 0, 0, 0, 0,0)) 
async def left():                        
 the_connection.mav.send(mavutil.mavlink.MAVLink_set_position_target_local_ned_message(10, the_connection.target_system,                         the_connection.target_component, mavutil.mavlink.MAV_FRAME_LOCAL_NED, int(0b010111111000), 0, -1,0 , 0, 0, 0, 0, 0, 0, 0, 0))
async def right(): 
 the_connection.mav.send(mavutil.mavlink.MAVLink_set_position_target_local_ned_message(10, the_connection.target_system , the_connection.target_component, mavutil.mavlink.MAV_FRAME_LOCAL_NED, int(0b010111111000), 0, 1,0 , 0, 0, 0, 0, 0, 0, 0, 0)) 
      
asyncio.run(connection())      
